keywords() ::= <<
Asm, auto, and, and_eq, bool, bitor, bitand, break, case, catch, char, class, compl, const, const_cast, continue, default, #define, delete, do, double, dynamic_cast, else, enum, exit(), explicit, export
extern, extern "C", false, float, for, union, unsigned, using, friend, goto, if, inline, int, long, mutable, virtual, namespace, new, not, not_eq, operator, or, or_eq, private, protected, public, register, void, reinterpret_cast,
return, short, signed, sizeof, static, static_cast, volatile, struct, switch, template, this, throw, true, try, typedef, typeid, union, unsigned, using, wchar_t, while, xor, xor_eq
>>


machine(imports, includedMachines, machine, constants_declarations, includes, enums, sets, declarations, initialization, operations, addition) ::= <<
#include \<iostream>
#include \<string>
#include "BUtils.cpp"
<imports; separator="\n">
<includedMachines; separator="\n">

#ifndef <machine>_H
#define <machine>_H

using namespace std;

class <machine> {

    <enums; separator="\n\n">

    private:

        <constants_declarations; separator="\n">

        <includes; separator="\n">

        <sets; separator="\n">

        <declarations; separator="\n">

    public:

        <initialization>

        <operations; separator="\n\n">

};
#endif

<addition>
>>

initialization(machine, body, constants_initializations) ::= <<
<machine>() {
    <constants_initializations; separator="\n">
    <body>
}
>>

method() ::= <<
>>

operation(returnType, operationName, parameters, locals, body, return) ::= <<
<returnType> <operationName>(<parameters; separator=", ">) {
    <locals; separator="\n">
    <body>
    <return>
}
>>

return(identifier) ::= <<
return <identifier>;
>>

no_return() ::=<<
>>

set_declaration(identifier, type, enums) ::= <<
#define <identifier> <set_enumeration("", type, "", enums, false)>
>>

iteration_construct_enumeration(type, identifier, set, body) ::= <<
for(<type> <identifier> : <set>) {
    <body>
}
>>

iteration_construct_assignment(type, identifier, expression, body) ::= <<
<type> <identifier> = <expression>;
<body>
>>

iteration_construct_subset(type, identifier, set, body) ::= <<
for(<type> <identifier> : <set>.pow()) {
    <body>
}
>>

iteration_construct_subsetneq(type, identifier, set, body) ::= <<
for(<type> <identifier> : <set>.pow().difference(<set>)) {
    <body>
}
>>

set_comprehension(type, identifier, isRelation, otherIterationConstructs, comprehension) ::= <<
<type> <identifier> = <type>();
<otherIterationConstructs>
<comprehension>
>>

set_comprehension_predicate(set, type, element, predicate, isRelation) ::= <<
if((<predicate>).booleanValue()) {
    <set> = <set>._union(<type>(<element>));
}
>>

lambda(type, identifier, otherIterationConstructs, lambda) ::= <<
<type> <identifier> = <type>();
<otherIterationConstructs>
<lambda>
>>

lambda_expression(relation, leftType, rightType, element, expression, predicate) ::= <<
if((<predicate>).booleanValue()) {
    <relation> = <relation>._union(BRelation\<<leftType>, <rightType>\>(BCouple\<<leftType>, <rightType>\>(<element>, <expression>)));
}
>>

quantified_predicate(identifier, forall, otherIterationConstructs, predicate) ::= <<
BBoolean <identifier> = BBoolean(<if(forall)>true<else>false<endif>);
<otherIterationConstructs>
<predicate>
>>

quantified_predicate_evaluation(identifier, predicate, forall) ::= <<
if(<if(forall)>!<endif>(<predicate>).booleanValue()) {
    <identifier> = BBoolean(<if(forall)>false<else>true<endif>);
    break;
}
>>

quantified_expression(identifier, identity, setType, otherIterationConstructs, evaluation, isInteger) ::= <<
<if(isInteger)>BInteger <identifier> = BInteger(<identity>);<else>BSet\<<setType>\> <identifier> = BSet\<<setType>\>();<endif>
<otherIterationConstructs>
<evaluation>
>>

quantified_expression_evaluation(predicate, identifier, operation, expression) ::= <<
if((<predicate>).booleanValue()) {
    <identifier> = <identifier>.<operation>(<expression>);
}
>>

set_enumeration(leftType, type, rightType, enums, isRelation) ::= <<
<if(isRelation)>(BRelation\<<leftType>, <rightType> >(<enums; separator=", ">))<else>(BSet\<<type> >(<enums; separator=", ">))<endif>
>>

enum_call(class, identifier) ::= <<
(<class>(<class>::<identifier>))
>>

set_enum_declaration(name,enums) ::= <<
class <name> : public BObject {
    public:

        enum <name>_type {
            <enums;separator=", \n">
        };

        <name>_type value;

        <name>(){}

        <name>(<name>_type type) {
            this->value = type;
        }

        BBoolean equal(const <name>& o) {
            return value == o.value;
        }

        BBoolean unequal(const <name>& o) {
            return value != o.value;
        }

        friend bool operator ==(const <name>& p1, const <name>& p2) {
            return p1.value == p2.value;
        }

        friend bool operator !=(const <name>& p1, const <name>& p2) {
            return p1.value != p2.value;
        }

        int hashCode() const {
            return static_cast\<int>(value);
        }
};
>>

bool() ::= <<
(BOOL)
>>

include_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

global_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)>;
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

constant_declaration(type, identifier) ::= <<
<type> <identifier>;
>>

constant_initialization(iterationConstruct, identifier, val) ::= <<
<iterationConstruct; separator="\n">
<identifier> = <val>;
>>

values() ::= <<
>>

parameter(type, identifier) ::= <<
<type> <identifier>
>>

parallel(loads, others) ::=<<
<loads; separator="\n">
<others; separator="\n">
>>

parallel_load(type, identifier) ::= <<
<type> _ld_<identifier> = <identifier>;
>>

assignment(leftType, rightType, iterationConstruct, identifier, modified_identifier, val, isIdentifierLhs, arg) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <val>;<else><identifier> = <modified_identifier>.override(BRelation\<<leftType>, <rightType>\>(BCouple\<<leftType>, <rightType>\>(<arg>,<val>)));<endif>
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(iterationConstruct, leftType, rightType, identifier, modified_identifier, set, isIdentifierLhs, arg) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <set>.nondeterminism();<else><identifier> = <modified_identifier>.override(BRelation\<<leftType>, <rightType>\>(BCouple\<<leftType>, <rightType>\>(<arg>,<set>.nondeterminism()));<endif>
>>

void() ::= <<
void
>>

type(type) ::= <<
<type>
>>

couple_type(leftType, rightType) ::=<<
BCouple\<<leftType>, <rightType> >
>>

set_type(type) ::=<<
BSet\<<type> >
>>

relation_type(leftType, rightType) ::=<<
BRelation\<<leftType>, <rightType> >
>>

import_type(type) ::= <<
#include "<type>.cpp"
>>


interval(arg1, arg2) ::= <<
(BSet\<BInteger>::range(<arg1>,<arg2>))
>>

couple_create(leftType, rightType, arg1, arg2) ::= <<
(BCouple\<<leftType>, <rightType>\>(<arg1>, <arg2>))
>>


binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

unary(operator, obj, args) ::= <<
<obj>.<operator>(<args; separator=", ">)
>>

select(iterationConstruct, predicate, then) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} else {
    throw runtime_error("Invocation of the operation is not possible");
}
>>

if(iterationConstruct, predicate, then, else1) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
int index = rand() % <len>
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(type, identifier, set, body, index) ::= <<
for(int _<index>_i = 0; _<index>_i \< (<set>.size()); _<index>_i++) {
    <type> <identifier> = *(std::next(<set>.begin(), _<index>_i));
    <body>
}
>>

any_body(predicate, body) ::= <<
if(<predicate>.booleanValue()) {
    <body>
    break;
}
>>

while(iterationConstruct1, iterationConstruct2, predicate, then) ::= <<
<iterationConstruct1; separator="\n">
while((<predicate>).booleanValue()) {
    <then>
    <iterationConstruct2; separator="\n">
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>

boolean_val(val) ::= <<
<if(val)>(BBoolean(true))<else>(BBoolean(false))<endif>
>>

identifier(identifier, isReturn, isPrivate, rhsOnLhs) ::= <<
<identifier>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>(BInteger("<number>"))<else>(BInteger(<number>))<endif>
>>

operation_call_with_assignment(var, function, args) ::= <<
<function>(<args; separator=",">, <var>);
>>

operation_call_without_assignment(machine, function, args, this) ::= <<
<if(this)>this-><else>this-><machine>.<endif><function>(<args; separator=",">);
>>