keywords() ::= <<Machine>>

machine(type_info, invariant, abstract_variables, operations, initialisation, machine, references, kind) ::= <<
\<Machine name='<machine>' type='<kind>'>
    <references; separator="\n">
    <abstract_variables>
    <invariant>
    <initialisation>
    <operations>
    <type_info>
\</Machine>
>>

extends(name) ::=<<
\<Extends>
    \<Referenced_Machine>
        \<Name><name>\</Name>
    \</Referenced_Machine>
\</Extends>
>>

operations(operation) ::=<<
\<Operations>
    <operation; separator="\n">
\</Operations>
>>

operation(name, output_parameters, parameter, precondition, body) ::=<<
\<Operation name='<name>'>
    <output_parameters>
    <parameter>
    <precondition>
    \<Body>
        <body; separator="\n">
    \</Body>
\</Operation>
>>

precondition(body) ::=<<
\<Precondition>
    <body>
\</Precondition>
>>

output_parameters(body) ::=<<
\<Output_Parameters>
    <body; separator="\n">
\</Output_Parameters>
>>



select(conditions, then, elseC) ::= <<
\<Select>
    \<When_Clauses>
        \<When>
            \<Condition>
                <conditions; separator="\n">
            \</Condition>
            \<Then>
                <then>
            \</Then>
        \</When>
    \</When_Clauses>
    <elseC>
\</Select>
>>

elseC(body) ::=<<
\<Else>
    <body>
\</Else>
>>

initialisation(body) ::= <<
\<Initialisation>
    <body>
\</Initialisation>
>>

abstract_variables(ids, attrs) ::= <<
\<Abstract_Variables>
    <ids; separator="\n">
\</Abstract_Variables>
>>

id(val, typref) ::= <<
\<Id value='<val>' typref='<typref>'/>
>>

id_blank(val) ::= <<
\<Id value='<val>'/>
>>

invariant(body) ::= <<
\<Invariant>
    <body>
\</Invariant>
>>

nary_pred(op, statements) ::= <<
\<Nary_Pred op='<op>'>
    <statements; separator="\n">
\</Nary_Pred>
>>

nary_sub(op,statements) ::= <<
\<Nary_Sub op='<op>'>
    <statements; separator="\n">
\</Nary_Sub>
>>

assignment_sub(body1, body2) ::= <<
\<Assignement_Sub>
    \<Variables>
        <body1; separator="\n">
    \</Variables>
    \<Values>
        <body2; separator="\n">
    \</Values>
\</Assignement_Sub>
>>

assert_sub(guard, body) ::= <<
\<Assert_Sub>
    \<Guard>
        <guard>
    \</Guard>
    \<Body>
        <body>
    \</Body>
\</Assert_Sub>
>>

pre_sub(precondition, body) ::= <<
\<PRE_Sub>
    \<Precondition>
        <precondition>
    \</Precondition>
    \<Body>
        <body>
    \</Body>
\</PRE_Sub>
>>

exp_comparision(op, statements)::= <<
\<Exp_Comparison op='<op>'>
    <statements; separator="\n">
\</Exp_Comparison>
>>

binary_exp(op, typref, body)::= <<
\<Binary_Exp op='<op>' typref='<typref>'>
    <body; separator="\n">
\</Binary_Exp>
>>

unary_exp(op, body) ::= <<
\<Unary_Exp op='<op>'>
    <body>
\</Unary_Exp>
>>

integer_literal(val, typref) ::=<<
\<Integer_Literal value='<val>' typref='<typref>'/>
>>

boolean_literal(val, typref) ::=<<
\<Boolean_Literal value='<val>' typref='<typref>'/>
>>

type_info(types) ::= <<
\<TypeInfos>
    <types; separator="\n">
\</TypeInfos>
>>

type(id, body) ::= <<
\<Type id='<id>'>
    <body>
\</Type>
>>

skip() ::=<<
\<Skip/>
>>

