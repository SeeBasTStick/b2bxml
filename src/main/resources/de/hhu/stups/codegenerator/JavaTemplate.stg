keywords() ::= <<
abstract, assert, boolean, break, byte, case, catch, char, class, continue, default, do, double, else, enum, extends, final, finally, float, for, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, try, void, volatile, while, true, false, null, var, const, goto, size
>>


machine(imports, machine, constants_declarations, includes, enums, sets, declarations, initialization, operations, addition) ::= <<
<imports; separator="\n">
import de.hhu.stups.btypes.BUtils;

public class <machine> {

    <constants_declarations; separator="\n">

    <includes; separator="\n">

    <enums; separator="\n\n">

    <sets; separator="\n">

    <declarations; separator="\n">

    <initialization>

    <operations; separator="\n\n">


    <addition>

}

>>

initialization(machine, properties, values, body) ::= <<
public <machine>() {
    <properties; separator="\n">
    <values>
    <body>
}
>>

method() ::= <<
>>

operation(returnType, operationName, parameters, locals, body, return) ::= <<
public <returnType> <operationName>(<parameters; separator=", ">) {
    <locals; separator="\n">
    <body>
    <return>
}
>>

return(identifier) ::= <<
return <identifier>;
>>

no_return() ::=<<
>>

set_declaration(identifier, type, enums) ::= <<
private BSet\<<type>\> <identifier> = <set_enumeration("", type, "", enums, false)>;
>>

set_enumeration(leftType, type, rightType, enums, isRelation) ::= <<
<if(isRelation)>new BRelation\<<leftType>, <rightType>\><else>new BSet\<<type>\><endif>(<enums; separator=", ">)
>>

seq_enumeration(type, elements) ::= <<
new BRelation\<BInteger, <type>\>(<elements; separator=", ">)
>>

iteration_construct_enumeration(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
for(<type> <identifier> : <set>) {
    <body>
}
>>

iteration_construct_assignment(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
<type> <identifier> = <set>;
<body>
>>

iteration_construct_subset(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
for(<type> <identifier> : <set>.pow()) {
    <body>
}
>>

iteration_construct_subsetneq(otherIterationConstructs, type, identifier, set, body) ::= <<
<otherIterationConstructs>
for(<type> <identifier> : <set>.pow().difference(<set>)) {
    <body>
}
>>

let_expression_predicate(body) ::= <<
<body>
>>

let_expression_predicate_body(otherIterationConstructs, type, identifier, val) ::= <<
<otherIterationConstructs>
<type> <identifier> = <val>;
>>

set_comprehension(type, identifier, isRelation, leftType, rightType, subType, comprehension) ::= <<
<type> <identifier> = new <if(isRelation)>BRelation\<<leftType>, <rightType>\><else>BSet\<<subType>\><endif>();
<comprehension>
>>

set_comprehension_predicate(otherIterationConstructs, set, element, emptyPredicate, predicate, isRelation, leftType, rightType, subType) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<set> = <set>.union(new <if(isRelation)>BRelation\<<leftType>, <rightType>\><else>BSet\<<subType>\><endif>(<element>));
<else>
if((<predicate>).booleanValue()) {
    <set> = <set>.union(new <if(isRelation)>BRelation\<<leftType>, <rightType>\><else>BSet\<<subType>\><endif>(<element>));
}
<endif>
>>

lambda(type, identifier, lambda, leftType, rightType) ::= <<
<type> <identifier> = new BRelation\<<leftType>, <rightType>\>();
<lambda>
>>

lambda_expression(otherIterationConstructs, relation, element, expression, emptyPredicate, predicate, leftType, rightType) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<relation> = <relation>.union(new BRelation\<<leftType>, <rightType>\>(new BTuple\<>(<element>, <expression>)));
<else>
if((<predicate>).booleanValue()) {
    <relation> = <relation>.union(new BRelation\<<leftType>, <rightType>\>(new BTuple\<>(<element>, <expression>)));
}
<endif>
>>

quantified_predicate(identifier, forall, predicate) ::= <<
BBoolean <identifier> = new BBoolean(<if(forall)>true<else>false<endif>);
<predicate>
>>

quantified_predicate_evaluation(otherIterationConstructs, identifier, emptyPredicate, predicate, forall) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = new BBoolean(<if(forall)>false<else>true<endif>);
break;
<else>
if(<if(forall)>!<endif>(<predicate>).booleanValue()) {
    <identifier> = new BBoolean(<if(forall)>false<else>true<endif>);
    break;
}
<endif>
>>

quantified_expression(identifier, identity, setType, evaluation, isInteger) ::= <<
<if(isInteger)>BInteger <identifier> = new BInteger(<identity>);<else>BSet\<<setType>\> <identifier> = new BSet\<<setType>\>();<endif>
<evaluation>
>>

quantified_expression_evaluation(otherIterationConstructs, emptyPredicate, predicate, identifier, operation, expression) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<identifier> = <identifier>.<operation>(<expression>);
<else>
if((<predicate>).booleanValue()) {
    <identifier> = <identifier>.<operation>(<expression>);
}
<endif>
>>

if_expression_predicate(predicate, ifThen, ifElse) ::= <<
<predicate>.booleanValue() ? <ifThen> : <ifElse>
>>

enum_call(machine, class, identifier, isCurrentMachine) ::= <<
<if(isCurrentMachine)><class>.<identifier><else><machine>.<class>.<identifier><endif>
>>

set_enum_declaration(name,enums) ::= <<
public enum <name> implements BObject {
    <enums; separator=", \n">;

    public BBoolean equal(<name> o) {
        return new BBoolean(this == o);
    }

    public BBoolean unequal(<name> o) {
        return new BBoolean(this != o);
    }
}
>>

bool() ::= <<
BUtils.BOOL
>>

include_declaration(type, identifier) ::= <<
private <declaration(type, identifier)> = new <type>();
>>

global_declaration(type, identifier) ::= <<
private <declaration(type, identifier)>;
>>

local_declaration(type, identifier) ::= <<
<declaration(type, identifier)> = null;
>>

constant_declaration(type, identifier) ::= <<
private final <type> <identifier>;
>>

constant_initialization(iterationConstruct, identifier, val) ::= <<
<iterationConstruct; separator="\n">
<identifier> = <val>;
>>

values(assignments) ::= <<
<assignments; separator="\n">
>>

declaration(type, identifier) ::= <<
<type> <identifier>
>>

parameter(type, identifier) ::= <<
<type> <identifier>
>>

parallel(loads, others) ::=<<
<loads; separator="\n">
<others; separator="\n">
>>

parallel_load(type, identifier) ::= <<
<type> _ld_<identifier> = <identifier>;
>>

assignment(iterationConstruct, identifier, modified_identifier, val, isIdentifierLhs, arg, leftType, rightType) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <val>;<else><identifier> = <modified_identifier>.override(new BRelation\<<leftType>, <rightType>\>(new BTuple\<>(<arg>,<val>)));<endif>
>>

assignments(assignments) ::= <<
<assignments; separator="\n">
>>

nondeterminism(iterationConstruct, identifier, modified_identifier, set, isIdentifierLhs, arg, leftType, rightType) ::= <<
<iterationConstruct; separator="\n">
<if(isIdentifierLhs)><identifier> = <set>.nondeterminism();<else><identifier> = <modified_identifier>.override(new BRelation\<<leftType>, <rightType>\>(new BTuple\<>(<arg>,<set>.nondeterminism()));<endif>
>>

void() ::= <<
void
>>

type(type) ::= <<
<type>
>>

tuple_type(leftType, rightType) ::= <<
BTuple\<<leftType>, <rightType>\>
>>

set_type(type) ::=<<
BSet\<<type>\>
>>

relation_type(leftType, rightType) ::=<<
BRelation\<<leftType>, <rightType>\>
>>

import_type(type) ::= <<
import de.hhu.stups.btypes.<type>;
>>


interval(arg1, arg2) ::= <<
BSet.interval(<arg1>,<arg2>)
>>

projection(arg1, arg2, isProjection1) ::= <<
BRelation.<if(isProjection1)>projection1<else>projection2<endif>(<arg1>,<arg2>)
>>

projection_tuple(arg, isProjection1) ::= <<
<arg>.<if(isProjection1)>projection1<else>projection2<endif>()
>>

identity(type, arg) ::= <<
BRelation.identity(<arg>)
>>

tuple_create(arg1, arg2) ::= <<
new BTuple\<>(<arg1>, <arg2>)
>>

record_create(elements) ::= <<
new BRecord(<elements; separator=", ">)
>>


binary(arg1,operator,arg2) ::= <<
<arg1>.<operator>(<arg2>)
>>

unary(operator, obj, args) ::= <<
<obj>.<operator>(<args; separator=", ">)
>>

select(iterationConstruct, predicate, then) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
}
>>

if(iterationConstruct, predicate, then, else1) ::= <<
<iterationConstruct; separator="\n">
if((<predicate>).booleanValue()) {
    <then>
} <else1; separator=" ">
>>

elseif(predicate, then) ::= <<
else if((<predicate>).booleanValue()) {
    <then>
}
>>

else(then) ::= <<
else {
    <then>
}
>>

choice(len, then, choice1) ::= <<
int index = (int) Math.floor(Math.random() * <len>);
if(index == 0) {
    <then>
} <choice1; separator=" ">
>>


choice1(counter, then) ::= <<
else if(index == <counter>) {
    <then>
}
>>

choice2(then) ::= <<
else {
    <then>
}
>>

any(body) ::= <<
<body>
>>

any_body(otherIterationConstructs, emptyPredicate, predicate, body, inLoop) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<body>
<if(inLoop)>break;<endif>
<else>
if((<predicate>).booleanValue()) {
    <body>
    <if(inLoop)>break;<endif>
}
<endif>
>>

becomes_such_that(loads, body) ::= <<
<loads; separator="\n">
<body>
>>

becomes_such_that_body(otherIterationConstructs, emptyPredicate, predicate, stores, inLoop) ::= <<
<otherIterationConstructs>
<if(emptyPredicate)>
<stores>
<if(inLoop)>break;<endif>
<else>
if((<predicate>).booleanValue()) {
    <stores>
    <if(inLoop)>break;<endif>
}
<endif>
>>

becomes_such_that_load(type, lhs, rhs) ::= <<
<type> <lhs> = <rhs>;
>>

becomes_such_that_store(lhs, rhs) ::= <<
<lhs> = <rhs>;
>>

while(iterationConstruct1, iterationConstruct2, predicate, then) ::= <<
<iterationConstruct1; separator="\n">
while((<predicate>).booleanValue()) {
    <then>
    <iterationConstruct2; separator="\n">
}
>>

var(locals, body) ::=<<
<locals; separator="\n">
<body>
>>

boolean_val(val) ::= <<
<if(val)>new BBoolean(true)<else>new BBoolean(false)<endif>
>>

identifier(identifier, rhsOnLhs) ::= <<
<if(rhsOnLhs)>_ld_<identifier><else><identifier><endif>
>>

number(number, useBigInteger) ::= <<
<if(useBigInteger)>new BInteger("<number>")<else>new BInteger(<number>)<endif>
>>

operation_call_with_assignment_many_parameters(var, machine, function, args, this, assignments) ::= <<
BRecord <var> = <operation_call_without_assignment(machine, function, args, this)>
<assignments; separator="\n">
>>

operation_call_assignment(identifier, type, var, index) ::= <<
<identifier> = (<type>) <var>.get("<index>");
>>

operation_call_with_assignment_one_parameter(var, machine, function, args, this) ::= <<
<var> = <operation_call_without_assignment(machine, function, args, this)>
>>

operation_call_without_assignment(machine, function, args, this) ::= <<
<if(this)>this.<else>this.<machine>.<endif><function>(<args; separator=",">);
>>

